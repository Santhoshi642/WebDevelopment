{"ast":null,"code":"var convertNetworkError=function convertNetworkError(err){return{code:'NETWORK-ERROR',err:err};};var convertServiceError=function convertServiceError(err){return Promise.reject(err);};export var fetchLoginStatus=function fetchLoginStatus(username){return fetch('/session',{method:'GET'}).catch(convertNetworkError).then(function(response){if(!response.ok){return response.json().then(convertServiceError);}return response.json();});};export var fetchLogin=function fetchLogin(username){return fetch('/session',{method:'POST',headers:new Headers({'content-type':'application/json'}),body:JSON.stringify({username:username})}).catch(convertNetworkError).then(function(response){if(!response.ok){return response.json().then(convertServiceError);}return response.json();});};export var fetchLists=function fetchLists(){return fetch('/lists',{method:'GET'}).catch(convertNetworkError).then(function(response){if(!response.ok){return response.json().then(convertServiceError);}return response.json();});};export var fetchSendMessage=function fetchSendMessage(messageText){return fetch('/message',{method:'POST',headers:new Headers({'content-type':'application/json'}),body:JSON.stringify({messageText:messageText})}).catch(function(){return Promise.reject({code:'NETWORK_ERROR'});}).then(function(response){if(!response.ok){return response.json().then(convertServiceError);}return response.json();});};export var fetchLogout=function fetchLogout(){return fetch('/session',{method:'DELETE'}).catch(convertNetworkError).then(function(response){if(!response.ok){return response.json().then(convertServiceError);}return response.ok;});};","map":{"version":3,"sources":["C:/Users/sahanadi/Desktop/class/info6250/student--sahanadarsh/work/react-chat/src/services.js"],"names":["convertNetworkError","err","code","convertServiceError","Promise","reject","fetchLoginStatus","username","fetch","method","catch","then","response","ok","json","fetchLogin","headers","Headers","body","JSON","stringify","fetchLists","fetchSendMessage","messageText","fetchLogout"],"mappings":"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","sourcesContent":["const convertNetworkError = (err) => {\r\n    return {\r\n      code: 'NETWORK-ERROR',\r\n      err\r\n    };\r\n  };\r\n\r\n  const convertServiceError = (err) => Promise.reject(err);\r\n  \r\n  export const fetchLoginStatus = (username) => {\r\n    return fetch('/session', {\r\n      method: 'GET',\r\n    })\r\n    .catch( convertNetworkError )\r\n    .then( response => {\r\n      if(!response.ok) {\r\n        return response.json().then(convertServiceError);\r\n      }\r\n      return response.json();\r\n    });\r\n  };\r\n  \r\n  export const fetchLogin = (username) => {\r\n    return fetch('/session', {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        'content-type': 'application/json',\r\n      }),\r\n      body: JSON.stringify({ username }),\r\n    })\r\n    .catch( convertNetworkError )\r\n    .then( response => {\r\n      if(!response.ok) {\r\n        return response.json().then( convertServiceError );\r\n      }\r\n      return response.json();\r\n    });\r\n  };\r\n\r\n  export const fetchLists = () => {\r\n    return fetch('/lists', {\r\n      method: 'GET',\r\n    })\r\n    .catch( convertNetworkError )\r\n    .then( (response) => {\r\n      if(!response.ok) {\r\n        return response.json().then( convertServiceError );\r\n      }\r\n      return response.json();\r\n    });\r\n  };\r\n\r\n  export const fetchSendMessage = (messageText) => {\r\n    return fetch('/message', {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        'content-type': 'application/json',\r\n      }),\r\n      body: JSON.stringify({ messageText }),\r\n    })\r\n    .catch( () => {\r\n      return Promise.reject({code: 'NETWORK_ERROR'});\r\n    })\r\n    .then( (response) => {\r\n      if(!response.ok) {\r\n          return response.json().then( convertServiceError );\r\n      }\r\n      return response.json();\r\n    });\r\n  };\r\n  \r\n  export const fetchLogout = () => {\r\n    return fetch('/session', {\r\n      method: 'DELETE',\r\n    })\r\n    .catch( convertNetworkError)\r\n    .then( (response) => {\r\n      if(!response.ok) {\r\n        return response.json().then( convertServiceError );\r\n      }\r\n      return response.ok;\r\n    });\r\n  };\r\n  \r\n  "]},"metadata":{},"sourceType":"module"}