{"ast":null,"code":"const convertNetworkError = err => {\n  return {\n    code: 'NETWORK-ERROR',\n    err\n  };\n};\n\nconst convertServiceError = err => Promise.reject(err);\n\nexport const fetchLoginStatus = username => {\n  return fetch('/session', {\n    method: 'GET'\n  }).catch(convertNetworkError).then(response => {\n    if (!response.ok) {\n      // This service happens to give error messages as JSON\n      return response.json().then(convertServiceError);\n    }\n\n    return response.json();\n  });\n};\nexport const fetchLogin = username => {\n  return fetch('/session', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(convertNetworkError).then(response => {\n    if (!response.ok) {\n      // This service happens to give error messages as JSON\n      return response.json().then(convertServiceError);\n    }\n\n    return response.json();\n  });\n};\nexport const fetchLogout = () => {\n  return fetch('/session', {\n    method: 'DELETE'\n  }).catch(convertNetworkError).then(response => {\n    // this service has limited options in return data\n    return response.ok;\n  });\n};","map":{"version":3,"sources":["C:/Users/sahanadi/Desktop/class/info6250/student--sahanadarsh/work/react-chat/src/services.js"],"names":["convertNetworkError","err","code","convertServiceError","Promise","reject","fetchLoginStatus","username","fetch","method","catch","then","response","ok","json","fetchLogin","headers","Headers","body","JSON","stringify","fetchLogout"],"mappings":"AAAA,MAAMA,mBAAmB,GAAIC,GAAD,IAAS;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAE,eADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALH;;AAOE,MAAME,mBAAmB,GAAIF,GAAD,IAASG,OAAO,CAACC,MAAR,CAAeJ,GAAf,CAArC;;AAEA,OAAO,MAAMK,gBAAgB,GAAIC,QAAD,IAAc;AAC5C,SAAOC,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAE;AADe,GAAb,CAAL,CAGNC,KAHM,CAGCV,mBAHD,EAINW,IAJM,CAIAC,QAAQ,IAAI;AACjB,QAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACf;AACA,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBR,mBAArB,CAAP;AACD;;AACD,WAAOS,QAAQ,CAACE,IAAT,EAAP;AACD,GAVM,CAAP;AAWD,CAZM;AAcP,OAAO,MAAMC,UAAU,GAAIR,QAAD,IAAc;AACtC,SAAOC,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAE,MADe;AAEvBO,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,sBAAgB;AADG,KAAZ,CAFc;AAKvBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEb,MAAAA;AAAF,KAAf;AALiB,GAAb,CAAL,CAONG,KAPM,CAOCV,mBAPD,EAQNW,IARM,CAQAC,QAAQ,IAAI;AACjB,QAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACf;AACA,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAsBR,mBAAtB,CAAP;AACD;;AACD,WAAOS,QAAQ,CAACE,IAAT,EAAP;AACD,GAdM,CAAP;AAeD,CAhBM;AAkBP,OAAO,MAAMO,WAAW,GAAG,MAAM;AAC/B,SAAOb,KAAK,CAAC,UAAD,EAAa;AACvBC,IAAAA,MAAM,EAAE;AADe,GAAb,CAAL,CAGNC,KAHM,CAGCV,mBAHD,EAINW,IAJM,CAIAC,QAAQ,IAAI;AACjB;AACA,WAAOA,QAAQ,CAACC,EAAhB;AACD,GAPM,CAAP;AAQD,CATM","sourcesContent":["const convertNetworkError = (err) => {\r\n    return {\r\n      code: 'NETWORK-ERROR',\r\n      err\r\n    };\r\n  };\r\n  \r\n  const convertServiceError = (err) => Promise.reject(err);\r\n  \r\n  export const fetchLoginStatus = (username) => {\r\n    return fetch('/session', {\r\n      method: 'GET',\r\n    })\r\n    .catch( convertNetworkError )\r\n    .then( response => {\r\n      if(!response.ok) {\r\n        // This service happens to give error messages as JSON\r\n        return response.json().then(convertServiceError);\r\n      }\r\n      return response.json();\r\n    });\r\n  };\r\n  \r\n  export const fetchLogin = (username) => {\r\n    return fetch('/session', {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        'content-type': 'application/json',\r\n      }),\r\n      body: JSON.stringify({ username }),\r\n    })\r\n    .catch( convertNetworkError )\r\n    .then( response => {\r\n      if(!response.ok) {\r\n        // This service happens to give error messages as JSON\r\n        return response.json().then( convertServiceError );\r\n      }\r\n      return response.json();\r\n    });\r\n  };\r\n  \r\n  export const fetchLogout = () => {\r\n    return fetch('/session', {\r\n      method: 'DELETE',\r\n    })\r\n    .catch( convertNetworkError)\r\n    .then( response => {\r\n      // this service has limited options in return data\r\n      return response.ok;\r\n    });\r\n  };\r\n  \r\n  "]},"metadata":{},"sourceType":"module"}